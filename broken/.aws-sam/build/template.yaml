AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Comprehensive Order Processing Serverless Workflow
Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyOrdersTable
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
      - AttributeName: OrderId
        AttributeType: B
      KeySchema:
      - AttributeName: OrderId
        KeyType: HASH
  OrderProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 900
      MaximumMessageSize: 1024
      MessageRetentionPeriod: 60
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 0
      QueueName: MyOrderProcessingQueue
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - OrderDeadLetterQueue
          - Arn
        maxReceiveCount: 1
  OrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 900
      MaximumMessageSize: 1024
      MessageRetentionPeriod: 60
      ReceiveMessageWaitTimeSeconds: 20
      QueueName: MyOrderDeadLetterQueue
  OrderNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MyOrderNotificationTopic
  OrderNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: OrderNotificationTopic
      Protocol: sqs
      Endpoint:
        Fn::GetAtt:
        - OrderProcessingQueue
        - Arn
      RawMessageDelivery: true
      FilterPolicyScope: MessageBody
      FilterPolicy:
        view:
          blocks:
            order_id:
            - order_process
  OrderProcessingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: OrderProcessingQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal: '*'
          Action: SQS:SendMessage
          Resource:
            Fn::GetAtt:
            - OrderProcessingQueue
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: OrderNotificationTopic
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: MyStepFunctionExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action:
            - lambda:InvokeFunction
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - dynamodb:PutItem
            Resource: '*'
  ValidateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validate-order.handler
      Runtime: python3.9
      CodeUri: ValidateOrderFunction
      Timeout: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - OrderProcessingQueue
            - QueueName
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
          ORDER_QUEUE_URL:
            Ref: OrderProcessingQueue
      ReservedConcurrentExecutions: 0
    Metadata:
      SamResourceId: ValidateOrderFunction
  SaveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: save-order.handler
      Runtime: python3.9
      CodeUri: SaveOrderFunction
      Timeout: 1
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - OrderNotificationTopic
            - TopicName
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
          ORDER_NOTIFICATION_TOPIC:
            Ref: OrderNotificationTopic
      ReservedConcurrentExecutions: 0
    Metadata:
      SamResourceId: SaveOrderFunction
  NotifyOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifyorder.handler
      Runtime: python3.9
      CodeUri: NotifyOrderFunction
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - OrderNotificationTopic
            - TopicName
      Environment:
        Variables:
          ORDER_NOTIFICATION_TOPIC:
            Ref: OrderNotificationTopic
      ReservedConcurrentExecutions: 0
    Metadata:
      SamResourceId: NotifyOrderFunction
  OrderProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
        - StepFunctionExecutionRole
        - Arn
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Order Processing Workflow\",\n  \"StartAt\"\
          : \"Validate Order\",\n  \"States\": {\n    \"Validate Order\": {\n    \
          \  \"Type\": \"Task\",\n      \"Resource\": \"${ValidateOrderFunction.Arn}\"\
          ,\n      \"Next\": \"Wait Before Save Order\",\n      \"Catch\": [\n   \
          \     {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"Next\"\
          : \"Validation Failed\"\n        }\n      ]\n    },\n    \"Wait Before Save\
          \ Order\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 3600,\n    \
          \  \"Next\": \"Save Order\"\n    },\n    \"Save Order\": {\n      \"Type\"\
          : \"Task\",\n      \"Resource\": \"${SaveOrderFunction.Arn}\",\n      \"\
          Next\": \"Wait Before Notify Order\",\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [\"States.ALL\"],\n          \"Next\": \"Save\
          \ Order Failed\"\n        }\n      ]\n    },\n    \"Wait Before Notify Order\"\
          : {\n      \"Type\": \"Wait\",\n      \"Seconds\": 3600,\n      \"Next\"\
          : \"Notify Order\"\n    },\n    \"Notify Order\": {\n      \"Type\": \"\
          Task\",\n      \"Resource\": \"${NotifyOrderFunction.Arn}\",\n      \"End\"\
          : true,\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"\
          ],\n          \"Next\": \"Notification Failed\"\n        }\n      ]\n  \
          \  },\n    \"Validation Failed\": {\n      \"Type\": \"Fail\",\n      \"\
          Cause\": \"Order validation failed\"\n    },\n    \"Save Order Failed\"\
          : {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to save order\"\
          \n    },\n    \"Notification Failed\": {\n      \"Type\": \"Fail\",\n  \
          \    \"Cause\": \"Unable to send order notification\"\n    }\n  }\n}\n"
  OrderSubmissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: order-submission.handler
      Runtime: python3.9
      CodeUri: OrderSubmissionFunction
      Timeout: 1
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - OrderNotificationTopic
            - TopicName
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - OrderProcessingStateMachine
            - Name
      Environment:
        Variables:
          ORDER_NOTIFICATION_TOPIC:
            Ref: OrderNotificationTopic
          ORDER_PROCESSING_STATE_MACHINE:
            Ref: OrderProcessingStateMachine
      Events:
        OrderApi:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId:
              Ref: OrderApi
      ReservedConcurrentExecutions: 0
    Metadata:
      SamResourceId: OrderSubmissionFunction
  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Order Processing API
        paths:
          /orders:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: Successful order processing
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2013600-03-31/functions/${OrderSubmissionFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
  ApiGatewayToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: MySNSPublishPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action: sns:Publish
            Resource:
              Ref: OrderNotificationTopic
Outputs:
  OrderNotificationTopicFullArn:
    Description: Full SNS Topic ARN for order notifications
    Value:
      Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:OrderNotificationTopic
  OrderNotificationTopicArn:
    Description: SNS Topic ARN for order notifications
    Value:
      Ref: OrderNotificationTopic
  OrderProcessingQueueURL:
    Description: SQS Queue URL for order processing
    Value:
      Ref: OrderProcessingQueue
